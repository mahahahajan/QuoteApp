{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bgColors","App","props","state","bgColor","quote","author","image","getQuote","bind","x","Math","floor","random","this","setState","request","XMLHttpRequest","open","responseType","send","quoteObj","onload","response","console","log","script","document","createElement","async","src","body","appendChild","setBackground","querySelector","style","backgroundColor","color","quoteUrl","id","alt","className","onClick","href","icon","faTwitterSquare","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSAYMA,G,MAAW,CACf,UAAW,UAAW,UAAW,UAAW,YAiF/BC,E,kDA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,QACTC,MAAO,GACPC,OAAQ,GACRC,MAAO,IAET,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBARC,E,4DAajB,IAAIC,EAAIC,KAAKC,MAAsB,EAAhBD,KAAKE,UACxBC,KAAKC,SAAS,CACZX,QAASJ,EAASU,O,iCAKpB,IAAIM,EAAU,IAAIC,eAElBD,EAAQE,KAAK,MADI,gDAEjBF,EAAQG,aAAe,OACvBH,EAAQI,OACR,IAAIC,EAAW,GACfL,EAAQM,OAAS,WAAa,IAAD,OAE3BD,EAAWL,EAAQO,SAAS,GAC5BC,QAAQC,IAAIJ,EAAQ,OAElB,EAAKN,SAAS,CACZV,MAAOgB,EAAQ,MACff,OAAQe,EAAQ,UAChBd,MAAOc,EAAQ,SAInBZ,KAAKK,Q,0CAKP,IAAMY,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAQ,EACfH,EAAOI,IAAM,kEACbH,SAASI,KAAKC,YAAYN,GAC1BZ,KAAKN,WACLM,KAAKmB,kB,+BAGLN,SAASO,cAAc,QAAQC,MAAMC,gBAAkBtB,KAAKX,MAAMC,QAClEuB,SAASO,cAAc,QAAQC,MAAME,MAAQvB,KAAKX,MAAMC,QACxDoB,QAAQC,IAAIX,KAAKX,MAAMI,OACvB,IAAI+B,EAAW,iCAAmCxB,KAAKX,MAAME,MAC7D,OACE,6BACE,yBAAKkC,GAAG,aACN,yBAAKT,IAAKhB,KAAKX,MAAMI,MAAOiC,IAAI,QAChC,yBAAKC,UAAU,cACb,wBAAIF,GAAG,QAAP,IACIzB,KAAKX,MAAME,MADf,KAGA,wBAAIkC,GAAG,UAAP,KAAmBzB,KAAKX,MAAMG,OAA9B,KACA,yBAAKmC,UAAU,SACb,4BAAQA,UAAU,SAASF,GAAG,YAAYG,QAAS5B,KAAKN,UAAxD,eACA,uBAAGmC,KAAML,EAAUC,GAAG,eAAtB,IAAqC,kBAAC,IAAD,CAAiBK,KAAMC,KAAvB,qB,GAnEjCC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.fa069b84.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faGithubAlt,\n  faGoogle,\n  faFacebook,\n  faTwitterSquare\n} from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\n\nconst bgColors = [\n  \"#ef476f\", \"#f6aa1c\", \"#06d6a0\", \"#118ab2\", \"#073b4c\"\n]\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColor: \"black\",\n      quote: \"\",\n      author: \"\",\n      image: \"\"\n    }\n    this.getQuote = this.getQuote.bind(this);\n  }\n  \n\n  setBackground() {\n    let x = Math.floor(Math.random() * 5);\n    this.setState({\n      bgColor: bgColors[x]\n    });\n  }\n\n  getQuote() {\n    let request = new XMLHttpRequest();\n    let requestURL = \"https://thesimpsonsquoteapi.glitch.me/quotes\";\n    request.open('GET', requestURL);\n    request.responseType = 'json';\n    request.send();\n    let quoteObj = \"\";\n    request.onload = function () {\n      // const quote = JSON.parse(request.response[0]);\n      quoteObj = request.response[0];\n      console.log(quoteObj[\"quote\"]);\n      let updateState = () => {\n        this.setState({\n          quote: quoteObj[\"quote\"],\n          author: quoteObj[\"character\"],\n          image: quoteObj[\"image\"]\n        });\n      };\n      updateState();\n    }.bind(this);\n\n  }\n\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    document.body.appendChild(script);\n    this.getQuote();\n    this.setBackground();\n  }\n  render() {\n    document.querySelector(\"body\").style.backgroundColor = this.state.bgColor;\n    document.querySelector(\"body\").style.color = this.state.bgColor;\n    console.log(this.state.image);\n    let quoteUrl = \"twitter.com/intent/tweet?text=\" + this.state.quote;\n    return (\n      <div >\n        <div id=\"quote-box\">\n          <img src={this.state.image} alt=\"new\" />\n          <div className=\"text-Space\">\n            <h1 id=\"text\">\n              \"{this.state.quote}\"\n            </h1>\n            <h3 id=\"author\"> -{this.state.author} </h3>\n            <div className=\"myRow\">\n              <button className=\"button\" id=\"new-quote\" onClick={this.getQuote}> New Quote </button>\n              <a href={quoteUrl} id=\"tweet-quote\"> <FontAwesomeIcon icon={faTwitterSquare}>Tweet Me</FontAwesomeIcon></a>\n\n            </div>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}